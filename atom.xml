<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Quinn的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://quinnyoung.com/"/>
  <updated>2020-07-24T07:08:32.891Z</updated>
  <id>https://quinnyoung.com/</id>
  
  <author>
    <name>QuinnYoung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode224 Basic Calculator</title>
    <link href="https://quinnyoung.com/2020/07/24/leetcode224-Basic-Calculator/"/>
    <id>https://quinnyoung.com/2020/07/24/leetcode224-Basic-Calculator/</id>
    <published>2020-07-23T16:45:21.000Z</published>
    <updated>2020-07-24T07:08:32.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-224-基本计算器"><a href="#Leetcode-224-基本计算器" class="headerlink" title="Leetcode 224.基本计算器"></a><a href="https://leetcode.com/problems/basic-calculator/" target="_blank" rel="noopener">Leetcode 224</a>.基本计算器</h1><p><img src="/images/leetcode224.png" alt="leetcode224"></p><p>很明显，这是一个中缀表达式求值的问题，但该题也有其独特性，也诞生出了一些新的解决方法，本人大致尝试了三种方法：</p><h2 id="常规思路"><a href="#常规思路" class="headerlink" title="常规思路"></a>常规思路</h2><p>一开始面对此题，很容易想到的是通常解决此类栈及表达式问题的思路。</p><p>前提是只有加减运算，即省去了运算符号优先级的比较。</p><h3 id="算法："><a href="#算法：" class="headerlink" title="算法："></a>算法：</h3><p>定义两个栈，num_stack用于存储数据，op_stack用于存储操作符。</p><ol><li>从左往右扫描字符串，遇到操作数入数据栈;</li><li>若遇到操作符 + 或 - 时：<ul><li>若操作符栈为空，直接压入该操作符栈；</li><li>若栈不为空，且栈顶不为左括号，则从数据栈弹出两个元素，从操作符栈弹出一个操作符进行计算，将结果并压入数据栈，然后压入该操作符栈；</li><li>若栈顶为左括号，压入该操作符栈；</li></ul></li><li>若是左括号，直接压入操作符栈，继续扫描；</li><li>若遇到的是右括号，则从数据栈弹出两个元素，从操作弹出一个操作符进行计算，并将结果加入到数据栈中，直到栈顶为左括号，弹出左括号后，继续扫描；</li><li>扫描完成时，若操作符栈为空，则数据栈顶即为计算结果；若操作符不为空，进行一步计算后，结束。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">compute</span> <span class="params">(<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; &amp;number_stack, <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; &amp;operator_stack)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num2 = number_stack.top();</span><br><span class="line">        number_stack.pop();</span><br><span class="line">        <span class="keyword">int</span> num1 = number_stack.top();</span><br><span class="line">        number_stack.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (operator_stack.top() == <span class="string">'+'</span>) &#123;</span><br><span class="line">            result = num1 + num2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = num1 - num2;</span><br><span class="line">        &#125;</span><br><span class="line">        number_stack.push(result);</span><br><span class="line">        operator_stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; number_stack;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; operator_stack;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (s[i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                    <span class="keyword">if</span> (operator_stack.empty() || operator_stack.top() == <span class="string">'('</span>) &#123;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        compute(number_stack, operator_stack);</span><br><span class="line">                    &#125;</span><br><span class="line">                    operator_stack.push(s[i]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                    operator_stack.push(s[i]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                    <span class="keyword">while</span> (operator_stack.top() != <span class="string">'('</span>) &#123;</span><br><span class="line">                        compute(number_stack, operator_stack);</span><br><span class="line">                    &#125;</span><br><span class="line">                    operator_stack.pop();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i])) &#123;</span><br><span class="line">                        num = s[i] - <span class="string">'0'</span>;</span><br><span class="line">                        <span class="keyword">while</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; <span class="built_in">isdigit</span>(s[i+<span class="number">1</span>])) &#123;</span><br><span class="line">                            ++i;</span><br><span class="line">                            num = s[i] - <span class="string">'0'</span> + num * <span class="number">10</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        number_stack.push(num);</span><br><span class="line">                        num = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!operator_stack.empty()) &#123;</span><br><span class="line">            compute(number_stack, operator_stack);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> number_stack.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="变通的解法"><a href="#变通的解法" class="headerlink" title="变通的解法"></a>变通的解法</h2><p><a href="https://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="noopener">逆波兰表达式</a>，即后序表达式，很容易求值详见<a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/" target="_blank" rel="noopener">leetcdoe 115</a>，而中序表达式转换为后序表达式可以通过<a href="https://zh.wikipedia.org/wiki/Shunting_yard算法" target="_blank" rel="noopener">Shunting yard算法</a>实现，该基本计算器的求解就分为两个比较容易的步骤了。</p><h2 id="巧妙的解法"><a href="#巧妙的解法" class="headerlink" title="巧妙的解法"></a>巧妙的解法</h2><p>leetcode中国官方关于基本计算器也提出了比较巧妙的<a href="https://leetcode-cn.com/problems/basic-calculator/solution/ji-ben-ji-suan-qi-by-leetcode/" target="_blank" rel="noopener">解题思路</a>，我选择了其第二种进行说明。</p><h3 id="算法：-1"><a href="#算法：-1" class="headerlink" title="算法："></a>算法：</h3><ol><li><p>从左到右扫描字符串；</p></li><li><p>遇到 + 或 - 运算符时，首先将表达式求值到左边，然后将正负符号保存到下一次求值。</p></li><li><p>如果字符是左括号 (，将迄今为止计算的结果和符号添加到栈上，然后重新开始进行计算，就像计算一个新的表达式一样。</p></li><li><p>如果字符是右括号 )，则首先计算左侧的表达式。则产生的结果就是刚刚结束的子表达式的结果。如果栈顶部有符号，则将此结果与符号相乘。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; calculate_stack;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : s) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                    result += sign * num;</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                    sign = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                    result += sign * num;</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                    sign = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                    calculate_stack.push(result);</span><br><span class="line">                    calculate_stack.push(sign);</span><br><span class="line">                    </span><br><span class="line">                    result = <span class="number">0</span>;</span><br><span class="line">                    sign = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                    result += sign * num; <span class="comment">// ')'括号左边的值</span></span><br><span class="line">                    </span><br><span class="line">                    result *= calculate_stack.top(); <span class="comment">// '('括号前的符号</span></span><br><span class="line">                    calculate_stack.pop();</span><br><span class="line">                    </span><br><span class="line">                    result += calculate_stack.top(); <span class="comment">// 之前的计算结果</span></span><br><span class="line">                    calculate_stack.pop();</span><br><span class="line">                    </span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">                        num = c - <span class="string">'0'</span> + num * <span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result + (sign * num); <span class="comment">// last number</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode-224-基本计算器&quot;&gt;&lt;a href=&quot;#Leetcode-224-基本计算器&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 224.基本计算器&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/pr
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://quinnyoung.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://quinnyoung.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>七月最近感言</title>
    <link href="https://quinnyoung.com/2020/07/20/%E4%B8%83%E6%9C%88%E6%84%9F%E8%A8%80/"/>
    <id>https://quinnyoung.com/2020/07/20/%E4%B8%83%E6%9C%88%E6%84%9F%E8%A8%80/</id>
    <published>2020-07-19T17:18:59.000Z</published>
    <updated>2020-07-20T06:05:25.863Z</updated>
    
    <content type="html"><![CDATA[<p>在大学的时候，我就一直有一个想法是写博客，但由于个人惫懒，计划就搁浅到了如今。</p><p>去年年底，从上一家公司离职后，又碰上了武汉疫情的爆发，本来准备年后就去武汉的计划也被拖延。不过值得庆幸的是，在一月下旬的时候，终于是把驾照拿到了。回想学车的那几个月，练车前后的艰辛，教练的辱骂，还有安全员的刁难等，其中的种种心累，不足一一道哉。感觉自从大学的象牙塔出来，就马上进入互联网公司，在广州白白呆了三年，还是与这个社会格格不入。果然，成长的过程还是要付出代价。</p><p>近来，在leetcode上也陆陆续续刷了30道题，各类计算机相关的基础及教程也在复习中；故而想到了搭建个人博客，记下学习路上及生活中的点滴。愿下半年的找工作过程一路顺利，虽砥砺前行，却能乘风破浪。</p><p>此文的结尾，用我最喜欢的一句名言作结：乾坤未定，你我仍是黑马！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在大学的时候，我就一直有一个想法是写博客，但由于个人惫懒，计划就搁浅到了如今。&lt;/p&gt;
&lt;p&gt;去年年底，从上一家公司离职后，又碰上了武汉疫情的爆发，本来准备年后就去武汉的计划也被拖延。不过值得庆幸的是，在一月下旬的时候，终于是把驾照拿到了。回想学车的那几个月，练车前后的艰辛
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://quinnyoung.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="job" scheme="https://quinnyoung.com/tags/job/"/>
    
  </entry>
  
</feed>
